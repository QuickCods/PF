1)a) [[1,2,3],[4],[5]]
  b) = length ([[1],[2],[],[3],[4]]) = 5
  c) [8,6,4,2,0]
  d) 9
  e) [(1,1),(2,1),(3,1),(4,1),(2,2),(3,2),(4,2)]
  f) [2,4,8,16,32]
  g) [2^n-1 | n <- [1..10]]
  h) 16
  i) ([Bool],String)
  j) p :: a -> b -> (a,b) -- tipo admissÃ­vel: Int -> Int -> (Int,Int)
  k) h :: Eq a => [a] -> [a] -> [a]
  l) feql :: Eq a => [a] -> Bool

2)a)distancia :: (Double,Double) -> (Double,Double) -> Double        -- Floating a => (a,a) -> (a,a) -> a
    distancia (x1,y1) (x2,y2) = sqrt((x2-x1)^2 + (y2-y1)^2)

  b)colineares :: (Double,Double) -> (Double,Double) -> (Double,Double) -> Bool      --Num a => (a,a) -> (a,a) -> (a,a) -> Bool
    colineares (x1,y1) (x2,y2) (x3,y3) = (x3-x2) * (y2-y1) == (y3-y2) * (x2-x1)

3)a)niguais :: Int -> a -> [a]
    niguais 0 x = []
    niguais n x = x : niguais (n-1) x

  b)niguais n x = [x | _ <- [1..n]]

4)merge :: Ord a => [a] -> [a] -> [a]
  merge l1 [] = l1
  merge [] l2 = l2
  merge (x:xs) (y:ys) | x <= y = x : merge xs (y:ys)
                      | otherwise = y : merge (x:xs) ys

5)length_zip :: [a] -> [(Int,a)]
  length_zip xs = zip [n,n-1..1] xs
                where n = length xs
  -- length xs = reverse (zip [1..] (reverse xs))

6)decompor :: Int -> [Int] -> [[Int]]
  decompor n [] | n == 0 = [[]]
                | otherwise = []
  decompor n (x:xs) = [niguais k x ++ l|k <- [0..n`div`x], l <- decompor (n-k*x) xs]  -- niguais = replicate
